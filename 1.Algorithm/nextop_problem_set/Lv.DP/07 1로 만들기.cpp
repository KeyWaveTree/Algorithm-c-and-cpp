#include<iostream>
#include<vector>

using namespace std;

vector<int> dpTable;

//3가지 연산을 사용해서 1이라는 숫자를 만드는 최소 연산횟수를 찾고 싶다.
//문제는 한 숫자에서 최대 3가지 연산을 할 수 있는데 어떤 연산이 최적의 연산 방법인지 몰라,
//3가지 연산을 한 숫자의 결과를 다 구해야 한다. 그런 다음,
// 그러한 숫자들 중에 어떤 숫자를 골라야 1을 만들때 연산이 적게드는 숫자인지 알아야 하기 때문에
//1을 구할때 까지 3가지 연산을 다 해봐야 한다.
//이런 방법을 체택하면 최대 3^1000000이기에 시간초과가 나온다.

//그러하기때문에 시간을 줄이기 위해서는  이러한 방법을 써야 한다.
// 1 ~ n 숫자까지 1씩 증가는 숫자 i를 만든다.
// 작은 숫자를 만들어서
// i가 1과 가까우면 가까울 수록 연산을 사용하는 횟수가 적을 것이다.
// 그러면 i 숫자가 1을 만들기 위한
// i에서 3가지 연산 중 할 수 있는 연산을 다 해본다.



int main() {
    int n;
    int i;

    cin >> n;
    dpTable.assign(n + 1, 0);

    for (i = 2; i <= n; i++) {
        //만약 x가 3으로 나누어 떨어지고 2로도 나누어 떨어진다면
        if(i%3==0 && i%2==0)
    }

    return 0;
}