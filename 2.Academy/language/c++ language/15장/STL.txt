standard templite liberay
3 종류의 컴포넌트 (컨테이너, 반복자, 알고리즘)

컨테이너란? 
여러 자료를 저장하는 창고 같은 역할 
즉 변수의 묶음이나 모여져 있는 것들을 말함

벡터(vector) : 동적배열 뒤에서 자료형 추가
큐(queue): FIFO
스텍(stack): LIFO
우선순위 큐(priority queue) : 큐(거의 트리)의 일종 큐의 요소들이 우선순위를 가지고 있음 순위가 높은 요소 먼저 출력
리스트 (list): 벡터와 유사하지만 중간에서 자료를 추가하는 연산 효율 높음
집합(set): 중복이 없는 자료들이 정렬되어 저장
map: 키- 값 (key -value)의 형식으로 저장 된다. 

순차와 연차의 차이(선형 , 비선형)


반복자(interator) 
컨테이너의 요소값을 가리키는데 사용 
컨테이너와 알고리즘의 중간다리 역할

왜 필요한 것인가? - 컨테이너의 요소를 가리키는 객체(일반화 된 포인터)
각요소의 접근하려면 어떻게 했나? index, 포인터 하지만 너무 반대되는 성격으로 까다롭다. 
종류와 관계없이 요소들에 접근하기 위해 반복자방식을 사용

시퀀스란? 순서를 가지고 있는 일련의 데이터 
반복자에서 연산자 사용가능
++ , -- 
==, !=
*, &
begin(), end()

반복자의 종류
전향 반복자 : ++
양방향 반복자: ++ , --
무작위 접근 반복자: ++, --, []
하지만 범위기반루프  - 반복자 필요성 감소

컨테이너의 공통 멤버 함수 
Container() 기본 생성자
Container(size) 크기가 size인 컨테이너 생성
Container(size, value)  크기가 size이고 초기값이 value인 컨테이너 생성
Container(iterator, iterator) 다른 컨테이너로 부터 초기값 범위를 받아서 생성
begin() 첫번째 요소의 위치 
clear() 모든 요소 삭제
empty() 비어있는지 검사
end() 마지막 요소의 위치 
erase(interator) 컨테이너 지정 요소 삭제
erase(interator, interator) 컨테이너 지정된 범위안 요소 삭제
front() 컨테이너 첫번째 요소
insert(iterator, value) 컨테이너 지정 위치에 value 삽입
pop_back() 컨테이너 마지막 요소 삭제 반환 없음
push_back(valye) 컨테이너 끝 value 데이터 추가 
rbegin() 끝을 나타냄 음.. 효율성? 가독성? 차이인가..?
rend() 시작을 나타냄
size() 컨테이너 크기
operator=(container) 대입 연산자 중복 정의 
알고리즘
처음부터 새로 만드는 것 보다는 누군가 구현한 오류없는 버전을 사용

탐색(find)
정렬(sort)
반전(reverse)
삭제(remove)
변환(transform)

덱 
